package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.30

import (
	"context"
	"go-app/graph/model"
	"go-app/pkg/domain"
	"strconv"
)

// CreateProfile is the resolver for the createProfile field.
func (r *mutationResolver) CreateProfile(ctx context.Context, input model.ProfileInput) (*model.Profile, error) {
	UserID, err := strconv.Atoi(input.UserID)
	profile := &domain.Profile{
		UserID:  UserID,
		Hobby:  input.Hobby,
	}

	createdProfile, err := r.ProfileUsecase.CreateProfile(profile)
	if err != nil {
		return nil, err
	}

	return &model.Profile{
		ID:     string(createdProfile.ID),
		UserID: string(createdProfile.UserID),
		Hobby:  createdProfile.Hobby,
	}, nil
}

// Profile is the resolver for the profile field.
func (r *queryResolver) Profile(ctx context.Context, userID string) (*model.Profile, error) {
	UserID, err := strconv.Atoi(userID)
	profile, err := r.ProfileUsecase.GetProfileByUserID(UserID)
	if err != nil {
		return nil, err
	}

	return &model.Profile{
		ID:     string(profile.ID),
		UserID: string(profile.UserID),
		Hobby:  profile.Hobby,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
